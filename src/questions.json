[{
        "id": 1,
        "question": "What is event delegation?",
        "answer": ["Event delegation allows you to avoid adding event listeners to specific nodes;  instead, the event listener is added to one parent.",
            "That event listener analyzes bubbled events to find a match on child elements."
        ]
    },
    {
        "id": 2,
        "question": "What is the event loop?",
        "answer": ["The process in which the JS engine updates the DOM.", "JavaScript is single-threaded. It only runs one process at a time; it has to order in which items are run intelligently.", "Runs functions from top to bottom of request in the stack queue. Asynchronous tasks are put in a task queue such as setTimeouts(), AJAX requests"]
    },
    {
        "id": 3,
        "question": "What is this?",
        "answer": ["‘this’ refers to the function it belongs to.", "If this is called in the global context then ‘this’ is the variable that is called in the global area.", "Arrow functions do not have their own ‘this’.", "If a function is contained within an object, \"this\" will refer to the nearest parent object."]
    },
    {
        "id": 4,
        "question": "What is a promise?",
        "answer": ["Objects that may or may not resolve, such as AJAX requests.", "Always returns something, whether an error or the object."]
    },
    {
        "id": 5,
        "question": "What is a closure?",
        "answer": ["A function that has access to variables within its own scope, the scope of its parent function, and global variables.", "The inner function will have access to the variables in the outer function scope, even after the outer function has returned."]
    },
    {
        "id": 6,
        "question": "What is a curried function?",
        "answer": ["A closure that does not have to receive all its arguments at once, but separately.", "Closures make currying possible"]
    },
    {
        "id": 7,
        "question": "What is a callback function?",
        "answer": ["A function passed as an argument in a function", "Called within a function."]
    },
    {
        "id": 8,
        "question": "What are two programming paradigms important for JavaScript developers.",
        "answer": ["JavaScript is a multi-paradigm language, supporting imperative/procedural programming along with OOP (Object-Oriented Programming) and functional programming. JavaScript supports OOP with prototypal inheritance." ]
    },
    {
        "id": 9,
        "question": "What’s the difference between let, const, and var?",
        "answer": ["‘var’ function scoped. Anything in a function. ‘var’ is hoisted so if you try to access before declaration you get ‘undefined’.", "‘let’ blocked scoped. Anything in curly braces {} (can be a function). ‘let’ is not hoisted. If accessed before declared, you get Reference Error", "‘const’ cannot be reassigned. Just like let otherwise with regards to non-hoisting. Can change properties "]
    },
    {
        "id": 10,
        "question": "What is scope?",
        "answer": ["Defines where variables and functions are accessible.", "Three scopes – function, block, and global scope"]
    },
    {
        "id": 11,
        "question": "What is hoisting?",
        "answer": ["Look it up."]
    },
    {
        "id": 12,
        "question": "What is the difference between == and === in JavaScript?",
        "answer": ["Abstract equality will attempt to resolve the data types via type coercion before making a comparison", "Strict equality will return false if the types are different."]
    },
    {
        "id": 13,
        "question": "What are some libraries/methods of requesting data?",
        "answer": ["XMLHttpRequest", "fetch()", "Axios", "Superagent"]
    },
    {
        "id": 14,
        "question": "Difference between put and post?",
        "answer": ["The difference between POST and PUT is that PUT requests are idempotent. That is, calling the same PUT request multiple times will always produce the same result. Calling a POST request repeatedly have side effects of creating the same resource multiple times."]
    },
    {
        "id": 15,
        "question": "How many data types are there and what are they?",
        "answer": ["Nine data types", "undefined", "null", "Boolean", "String", "Number", "BigInt", "Symbol", "Object", "Function"]
    },
    {
        "id": 16,
        "question": "What is the difference between null and undefined?",
        "answer": ["null is absence of value", "undefined has not been assigned a value yet"]
    }
]